// Code generated by protoc-gen-go.
// source: transfer.proto
// DO NOT EDIT!

/*
Package transfer is a generated protocol buffer package.

It is generated from these files:
	transfer.proto

It has these top-level messages:
	Message
*/
package transfer

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MessageType int32

const (
	MessageType_Set    MessageType = 0
	MessageType_Get    MessageType = 1
	MessageType_Remove MessageType = 2
	MessageType_Sync   MessageType = 3
)

var MessageType_name = map[int32]string{
	0: "Set",
	1: "Get",
	2: "Remove",
	3: "Sync",
}
var MessageType_value = map[string]int32{
	"Set":    0,
	"Get":    1,
	"Remove": 2,
	"Sync":   3,
}

func (x MessageType) String() string {
	return proto.EnumName(MessageType_name, int32(x))
}
func (MessageType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Message struct {
	MessageType MessageType `protobuf:"varint,1,opt,name=messageType,enum=transfer.MessageType" json:"messageType,omitempty"`
	Key         string      `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	Value       []byte      `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Message) GetMessageType() MessageType {
	if m != nil {
		return m.MessageType
	}
	return MessageType_Set
}

func (m *Message) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Message) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func init() {
	proto.RegisterType((*Message)(nil), "transfer.Message")
	proto.RegisterEnum("transfer.MessageType", MessageType_name, MessageType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Transfer service

type TransferClient interface {
	Request(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
}

type transferClient struct {
	cc *grpc.ClientConn
}

func NewTransferClient(cc *grpc.ClientConn) TransferClient {
	return &transferClient{cc}
}

func (c *transferClient) Request(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := grpc.Invoke(ctx, "/transfer.Transfer/Request", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Transfer service

type TransferServer interface {
	Request(context.Context, *Message) (*Message, error)
}

func RegisterTransferServer(s *grpc.Server, srv TransferServer) {
	s.RegisterService(&_Transfer_serviceDesc, srv)
}

func _Transfer_Request_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServer).Request(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transfer.Transfer/Request",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServer).Request(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

var _Transfer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "transfer.Transfer",
	HandlerType: (*TransferServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Request",
			Handler:    _Transfer_Request_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transfer.proto",
}

func init() { proto.RegisterFile("transfer.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 192 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x2b, 0x29, 0x4a, 0xcc,
	0x2b, 0x4e, 0x4b, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x80, 0xf1, 0x95, 0xb2,
	0xb8, 0xd8, 0x7d, 0x53, 0x8b, 0x8b, 0x13, 0xd3, 0x53, 0x85, 0xcc, 0xb9, 0xb8, 0x73, 0x21, 0xcc,
	0x90, 0xca, 0x82, 0x54, 0x09, 0x46, 0x05, 0x46, 0x0d, 0x3e, 0x23, 0x51, 0x3d, 0xb8, 0x56, 0x24,
	0xc9, 0x20, 0x64, 0x95, 0x42, 0x02, 0x5c, 0xcc, 0xd9, 0xa9, 0x95, 0x12, 0x4c, 0x0a, 0x8c, 0x1a,
	0x9c, 0x41, 0x20, 0xa6, 0x90, 0x08, 0x17, 0x6b, 0x59, 0x62, 0x4e, 0x69, 0xaa, 0x04, 0xb3, 0x02,
	0xa3, 0x06, 0x4f, 0x10, 0x84, 0xa3, 0x65, 0x8a, 0x62, 0x81, 0x10, 0x3b, 0x17, 0x73, 0x70, 0x6a,
	0x89, 0x00, 0x03, 0x88, 0xe1, 0x9e, 0x5a, 0x22, 0xc0, 0x28, 0xc4, 0xc5, 0xc5, 0x16, 0x94, 0x9a,
	0x9b, 0x5f, 0x96, 0x2a, 0xc0, 0x24, 0xc4, 0xc1, 0xc5, 0x12, 0x5c, 0x99, 0x97, 0x2c, 0xc0, 0x6c,
	0x64, 0xcb, 0xc5, 0x11, 0x02, 0x75, 0x83, 0x90, 0x21, 0x17, 0x7b, 0x50, 0x6a, 0x61, 0x69, 0x6a,
	0x71, 0x89, 0x90, 0x20, 0xc2, 0x65, 0x50, 0x1f, 0x48, 0x61, 0x0a, 0x29, 0x31, 0x24, 0xb1, 0x81,
	0xbd, 0x6c, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x39, 0xd0, 0xab, 0xda, 0x04, 0x01, 0x00, 0x00,
}
