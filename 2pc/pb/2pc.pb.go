// Code generated by protoc-gen-go.
// source: 2pc.proto
// DO NOT EDIT!

/*
Package twopcpb is a generated protocol buffer package.

It is generated from these files:
	2pc.proto

It has these top-level messages:
	Message
	EmptyMessage
	SetRequest
*/
package twopcpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MessageType int32

const (
	MessageType_VoteRequest   MessageType = 0
	MessageType_VoteCommit    MessageType = 1
	MessageType_VoteAbort     MessageType = 2
	MessageType_GlobalCommit  MessageType = 3
	MessageType_GlobalAbort   MessageType = 4
	MessageType_GlobalRequest MessageType = 5
	MessageType_ACK           MessageType = 6
)

var MessageType_name = map[int32]string{
	0: "VoteRequest",
	1: "VoteCommit",
	2: "VoteAbort",
	3: "GlobalCommit",
	4: "GlobalAbort",
	5: "GlobalRequest",
	6: "ACK",
}
var MessageType_value = map[string]int32{
	"VoteRequest":   0,
	"VoteCommit":    1,
	"VoteAbort":     2,
	"GlobalCommit":  3,
	"GlobalAbort":   4,
	"GlobalRequest": 5,
	"ACK":           6,
}

func (x MessageType) String() string {
	return proto.EnumName(MessageType_name, int32(x))
}
func (MessageType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type RequestType int32

const (
	RequestType_Get RequestType = 0
	RequestType_Set RequestType = 1
)

var RequestType_name = map[int32]string{
	0: "Get",
	1: "Set",
}
var RequestType_value = map[string]int32{
	"Get": 0,
	"Set": 1,
}

func (x RequestType) String() string {
	return proto.EnumName(RequestType_name, int32(x))
}
func (RequestType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Message struct {
	ClientID    uint64      `protobuf:"varint,1,opt,name=ClientID" json:"ClientID,omitempty"`
	MessageType MessageType `protobuf:"varint,2,opt,name=messageType,enum=twopcpb.MessageType" json:"messageType,omitempty"`
	RequestID   uint64      `protobuf:"varint,3,opt,name=requestID" json:"requestID,omitempty"`
	// Substantial request
	RequestType RequestType `protobuf:"varint,4,opt,name=requestType,enum=twopcpb.RequestType" json:"requestType,omitempty"`
	Key         []byte      `protobuf:"bytes,5,opt,name=key,proto3" json:"key,omitempty"`
	Value       []byte      `protobuf:"bytes,6,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Message) GetClientID() uint64 {
	if m != nil {
		return m.ClientID
	}
	return 0
}

func (m *Message) GetMessageType() MessageType {
	if m != nil {
		return m.MessageType
	}
	return MessageType_VoteRequest
}

func (m *Message) GetRequestID() uint64 {
	if m != nil {
		return m.RequestID
	}
	return 0
}

func (m *Message) GetRequestType() RequestType {
	if m != nil {
		return m.RequestType
	}
	return RequestType_Get
}

func (m *Message) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *Message) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type EmptyMessage struct {
}

func (m *EmptyMessage) Reset()                    { *m = EmptyMessage{} }
func (m *EmptyMessage) String() string            { return proto.CompactTextString(m) }
func (*EmptyMessage) ProtoMessage()               {}
func (*EmptyMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type SetRequest struct {
	RequestType RequestType `protobuf:"varint,1,opt,name=requestType,enum=twopcpb.RequestType" json:"requestType,omitempty"`
	Key         []byte      `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Value       []byte      `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *SetRequest) Reset()                    { *m = SetRequest{} }
func (m *SetRequest) String() string            { return proto.CompactTextString(m) }
func (*SetRequest) ProtoMessage()               {}
func (*SetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SetRequest) GetRequestType() RequestType {
	if m != nil {
		return m.RequestType
	}
	return RequestType_Get
}

func (m *SetRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *SetRequest) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func init() {
	proto.RegisterType((*Message)(nil), "twopcpb.Message")
	proto.RegisterType((*EmptyMessage)(nil), "twopcpb.EmptyMessage")
	proto.RegisterType((*SetRequest)(nil), "twopcpb.SetRequest")
	proto.RegisterEnum("twopcpb.MessageType", MessageType_name, MessageType_value)
	proto.RegisterEnum("twopcpb.RequestType", RequestType_name, RequestType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Cluster service

type ClusterClient interface {
	Connection(ctx context.Context, opts ...grpc.CallOption) (Cluster_ConnectionClient, error)
	Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*EmptyMessage, error)
}

type clusterClient struct {
	cc *grpc.ClientConn
}

func NewClusterClient(cc *grpc.ClientConn) ClusterClient {
	return &clusterClient{cc}
}

func (c *clusterClient) Connection(ctx context.Context, opts ...grpc.CallOption) (Cluster_ConnectionClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Cluster_serviceDesc.Streams[0], c.cc, "/twopcpb.Cluster/Connection", opts...)
	if err != nil {
		return nil, err
	}
	x := &clusterConnectionClient{stream}
	return x, nil
}

type Cluster_ConnectionClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type clusterConnectionClient struct {
	grpc.ClientStream
}

func (x *clusterConnectionClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *clusterConnectionClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *clusterClient) Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := grpc.Invoke(ctx, "/twopcpb.Cluster/Set", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Cluster service

type ClusterServer interface {
	Connection(Cluster_ConnectionServer) error
	Set(context.Context, *SetRequest) (*EmptyMessage, error)
}

func RegisterClusterServer(s *grpc.Server, srv ClusterServer) {
	s.RegisterService(&_Cluster_serviceDesc, srv)
}

func _Cluster_Connection_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ClusterServer).Connection(&clusterConnectionServer{stream})
}

type Cluster_ConnectionServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type clusterConnectionServer struct {
	grpc.ServerStream
}

func (x *clusterConnectionServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *clusterConnectionServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Cluster_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twopcpb.Cluster/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).Set(ctx, req.(*SetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Cluster_serviceDesc = grpc.ServiceDesc{
	ServiceName: "twopcpb.Cluster",
	HandlerType: (*ClusterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Set",
			Handler:    _Cluster_Set_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connection",
			Handler:       _Cluster_Connection_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "2pc.proto",
}

func init() { proto.RegisterFile("2pc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 343 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x92, 0x4f, 0x4b, 0xc3, 0x40,
	0x10, 0xc5, 0xbb, 0x4d, 0xdb, 0xd8, 0xe9, 0x1f, 0xd7, 0xb1, 0x42, 0x28, 0x82, 0x25, 0xa7, 0xd0,
	0x43, 0x91, 0x16, 0x7a, 0x2f, 0x51, 0x8a, 0x88, 0x97, 0x54, 0xbc, 0x37, 0x65, 0x90, 0x62, 0x92,
	0x8d, 0xc9, 0xb6, 0x52, 0xf0, 0x9b, 0xfa, 0x65, 0x64, 0x93, 0x35, 0x4d, 0xaa, 0x17, 0x6f, 0x99,
	0x37, 0x8f, 0xdf, 0x63, 0x5e, 0x16, 0xda, 0xd3, 0x78, 0x33, 0x89, 0x13, 0x21, 0x05, 0x9a, 0xf2,
	0x43, 0xc4, 0x9b, 0xd8, 0xb7, 0xbf, 0x18, 0x98, 0x4f, 0x94, 0xa6, 0xeb, 0x57, 0xc2, 0x21, 0x9c,
	0xb9, 0xc1, 0x96, 0x22, 0xf9, 0x70, 0x67, 0xb1, 0x11, 0x73, 0x1a, 0x5e, 0x31, 0xe3, 0x1c, 0x3a,
	0x61, 0x6e, 0x7b, 0x3e, 0xc4, 0x64, 0xd5, 0x47, 0xcc, 0xe9, 0x4f, 0x07, 0x13, 0x8d, 0x99, 0x94,
	0x76, 0x5e, 0xd9, 0x88, 0xd7, 0xd0, 0x4e, 0xe8, 0x7d, 0x47, 0xa9, 0x82, 0x1a, 0x19, 0xf4, 0x28,
	0x28, 0xaa, 0x1e, 0x32, 0x6a, 0xe3, 0x84, 0x5a, 0xda, 0x79, 0x65, 0x23, 0x72, 0x30, 0xde, 0xe8,
	0x60, 0x35, 0x47, 0xcc, 0xe9, 0x7a, 0xea, 0x13, 0x07, 0xd0, 0xdc, 0xaf, 0x83, 0x1d, 0x59, 0xad,
	0x4c, 0xcb, 0x07, 0xbb, 0x0f, 0xdd, 0xfb, 0x30, 0x96, 0x07, 0x7d, 0xa1, 0x1d, 0x00, 0xac, 0x48,
	0x7a, 0x39, 0xe9, 0x34, 0x9d, 0xfd, 0x33, 0xbd, 0xfe, 0x47, 0xba, 0x51, 0x4a, 0x1f, 0x7f, 0x56,
	0x3a, 0xc3, 0x73, 0xe8, 0xbc, 0x08, 0x49, 0x3a, 0x9d, 0xd7, 0xb0, 0x0f, 0xa0, 0x04, 0x57, 0x84,
	0xe1, 0x56, 0x72, 0x86, 0x3d, 0x68, 0xab, 0x79, 0xe1, 0x8b, 0x44, 0xf2, 0x3a, 0x72, 0xe8, 0x2e,
	0x03, 0xe1, 0xaf, 0x03, 0x6d, 0x30, 0x14, 0x21, 0x57, 0x72, 0x4b, 0x03, 0x2f, 0xa0, 0x97, 0x0b,
	0x3f, 0xd0, 0x26, 0x9a, 0x60, 0x2c, 0xdc, 0x47, 0xde, 0x1a, 0xdf, 0x54, 0xae, 0x53, 0xfa, 0x92,
	0x54, 0xaa, 0x09, 0xc6, 0x8a, 0x24, 0x67, 0xd3, 0x3d, 0x98, 0x6e, 0xb0, 0x4b, 0x25, 0x25, 0x38,
	0x07, 0x70, 0x45, 0x14, 0xd1, 0x46, 0x6e, 0x45, 0x84, 0xbc, 0xa8, 0x40, 0xf7, 0x36, 0xfc, 0xa5,
	0xd8, 0x35, 0x87, 0xdd, 0x32, 0x9c, 0x65, 0x2c, 0xbc, 0x2c, 0xd6, 0xc7, 0x76, 0x87, 0x57, 0x85,
	0x58, 0xf9, 0x05, 0x35, 0xbf, 0x95, 0x3d, 0xc1, 0xd9, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf6,
	0xa5, 0x50, 0xdf, 0x8f, 0x02, 0x00, 0x00,
}
